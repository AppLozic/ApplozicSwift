# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Release new version"
  lane :release do
	  releaseBranchName = git_branch

    unless releaseBranchName.partition('/').first == "release"
      raise "Incorrect branch, expected release branch".red
    end

    sh("git", "fetch")
    sh("git", "checkout", releaseBranchName)

    version = releaseBranchName.partition('/').last
    version_bump_podspec(path: "ApplozicSwift.podspec", version_number: version)
    cocoapods(clean: true, podfile: "Demo/Podfile", repo_update: true)

    pod_lib_lint
    update_changelog_tag
    push_version_update

    pod_push
    release_docs
  end

  desc "Create release draft"
  lane :release_docs do
    changelog = read_changelog(
      section_identifier: "[version]" # replace with version var
    )
    set_github_release(
      repository_name: "AppLozic/ApplozicSwift",
      api_token: ENV["DANGER_GITHUB_API_TOKEN"],
      name: version,
      tag_name: version,
      description: (changelog rescue "No changelog provided"),
      is_draft: "true"
    )
  end

  desc "Update changelog"
  lane :update_changelog_tag do
    stamp_changelog(
      section_identifier: version,
      git_tag: version,
      stamp_date: "true"
    )
  end

  desc "Commit and push changes"
  lane :push_version_update do
    sh("git", "add", "-u")
    sh("git", "commit", "-m", "Bump version to #{version} [ci skip]")
    sh("git", "fetch")
    sh("git", "checkout", "master")
    sh("git", "merge", releaseBranchName)
    sh("git", "tag", version)
    sh("git", "push", "origin", "--tags", "master")
    sh("git", "checkout", "dev")
    sh("git", "merge", "master")
    sh("git", "push", "origin", "dev")
  end
end